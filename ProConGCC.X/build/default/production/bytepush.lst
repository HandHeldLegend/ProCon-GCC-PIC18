

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                                           Wed Jan 12 14:48:32 2022


     1                           	processor	18F25K42
     2                           	pagewidth 132
     3                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     4                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    11                           	psect	udata_bank7,global,class=BANK7,space=1,delta=1,lowdata,noexec
    12                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    13                           	psect	code,global,reloc=2,class=CODE,delta=1
    14                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    15                           	psect	edata,global,class=EEDATA,space=3,delta=2,noexec
    16                           	psect	barfunc,local,reloc=2,class=CODE,delta=1
    17  0000                     
    18                           	psect	edata
    19  0000                     stk_offset	set	0
    20  0000                     auto_size	set	0
    21                           
    22                           ; stack_auto defines a symbol /name/_offset which equates to the
    23                           ; stack offset of the auto object in question
    24  000000                     
    25                           ; stack_param defines a symbol /name/_offset which equates to the
    26                           ; stack offset of the parameter object in question
    27  000000                     
    28                           ; alloc_stack adjusts the SP to allocate space for auto objects
    29                           ; it also links in to the btemp symbol so that can be used
    30  000000                     
    31                           ; restore_stack adjusts the SP to remove all auto and parameter
    32                           ; objects from the stack prior to returning from a function
    33  000000                     
    34                           ; When assembly code is placed in a psect, it can be manipulated as a
    35                           ; whole by the linker and placed in memory.
    36                           ;
    37                           ; In this example, barfunc is the program section (psect) name, 'local' means
    38                           ; that the section will not be combined with other sections even if they have
    39                           ; the same name. class=CODE means the barfunc must go in the CODE container.
    40                           ; PIC18's should have a delta (addressible unit size) of 1 (default) since they
    41                           ; are byte addressible. PIC10/12/16's have a delta of 2 since they are word
    42                           ; addressible. PIC18's should have a reloc (alignment) flag of 2 for any
    43                           ; psect which contains executable code. PIC10/12/16's can use the default
    44                           ; reloc value of 1. Use one of the psects below for the device you use:
    45                           ; psect barfunc,local,class=CODE,delta=2 ; PIC10/12/16
    46                           
    47                           	psect	barfunc
    48  00001E                     _bytepush:
    49                           	callstack 0
    50                           
    51                           ; Check if we have a command to push out
    52  00001E  AC2B               	btfss	_gInStatus,6,c	; Byte 6 tells us if a command has been interpreted
    53  000020  0012               	return		; Return if there's no command to push out
    54  000022  94C3               	bcf	16323,2,c	; Turn the data pin around so we can drive
    55  000024                     newByte:
    56  000024  0060  F0C3  FFE9   	movff	_gConOutIdx,fsr0l	; Get the address for our first byte, place into FSR0
    57  00002A  006F FFBC  F032    	movff	indf0,_gConOutByte	; Set the outgoing byte with the first byte.
    58  000030  6A4B               	clrf	_gConBitCounter,c	; Set bit counter to 0 (clear)
    59  000032  864B               	bsf	_gConBitCounter,3,c	; Set bit counter to 8.
    60  000034                     writeBit:
    61  000034  94CB               	bcf	16331,2,c	; Set port to LOW
    62  000036  AE32               	btfss	_gConOutByte,7,c	; Check the leftmost bit, skip if one.
    63  000038  EF59  F000         	goto	lowBitWrite	; Bit is 0, write a low bit out.
    64  00003C                     
    65                           ;
    66  00003C  4E4B               	dcfsnz	_gConBitCounter,f,c	; Decrement the BIT counter. Skip next when NOT 0 to go to next bit
    67  00003E  EFCA  F000         	goto	endHighWrite
    68  000042  0000               	nop	
    69  000044  0000               	nop	
    70  000046  0000               	nop	
    71  000048  0000               	nop	
    72  00004A  0000               	nop	
    73  00004C  0000               	nop	
    74  00004E  0000               	nop	
    75  000050  0000               	nop	
    76  000052  0000               	nop	
    77  000054  0000               	nop	
    78  000056  0000               	nop	
    79  000058  0000               	nop	
    80  00005A  0000               	nop	
    81  00005C  0000               	nop	
    82  00005E  84CB               	bsf	16331,2,c	; Set port to HIGH
    83  000060  0000               	nop	
    84  000062  0000               	nop	
    85  000064  0000               	nop	
    86  000066  0000               	nop	
    87  000068  0000               	nop	
    88  00006A  0000               	nop	
    89  00006C  0000               	nop	
    90  00006E  0000               	nop	
    91  000070  0000               	nop	
    92  000072  0000               	nop	
    93  000074  0000               	nop	
    94  000076  0000               	nop	
    95  000078  0000               	nop	
    96  00007A  0000               	nop	
    97  00007C  0000               	nop	
    98  00007E  0000               	nop	
    99  000080  0000               	nop	
   100  000082  0000               	nop	
   101  000084  0000               	nop	
   102  000086  0000               	nop	
   103  000088  0000               	nop	
   104  00008A  0000               	nop	
   105  00008C  0000               	nop	
   106  00008E  0000               	nop	
   107  000090  0000               	nop	
   108  000092  0000               	nop	
   109  000094  0000               	nop	
   110  000096  0000               	nop	
   111  000098  0000               	nop	
   112  00009A  0000               	nop	
   113  00009C  0000               	nop	
   114  00009E  0000               	nop	
   115  0000A0  0000               	nop	
   116  0000A2  0000               	nop	
   117  0000A4  0000               	nop	
   118  0000A6  0000               	nop	
   119  0000A8  0000               	nop	
   120  0000AA  0000               	nop	
   121  0000AC  0000               	nop	
   122  0000AE  EF94  F000         	goto	getNextBit
   123  0000B2                     lowBitWrite:
   124  0000B2  4E4B               	dcfsnz	_gConBitCounter,f,c	; Decrement the BIT counter. Skip next when NOT 0 to go to next bit
   125  0000B4  EFF8  F000         	goto	endLowWrite
   126  0000B8  0000               	nop	
   127  0000BA  0000               	nop	
   128  0000BC  0000               	nop	
   129  0000BE  0000               	nop	
   130  0000C0  0000               	nop	
   131  0000C2  0000               	nop	
   132  0000C4  0000               	nop	
   133  0000C6  0000               	nop	
   134  0000C8  0000               	nop	
   135  0000CA  0000               	nop	
   136  0000CC  0000               	nop	
   137  0000CE  0000               	nop	
   138  0000D0  0000               	nop	
   139  0000D2  0000               	nop	
   140  0000D4  0000               	nop	
   141  0000D6  0000               	nop	
   142  0000D8  0000               	nop	
   143  0000DA  0000               	nop	
   144  0000DC  0000               	nop	
   145  0000DE  0000               	nop	
   146  0000E0  0000               	nop	
   147  0000E2  0000               	nop	
   148  0000E4  0000               	nop	
   149  0000E6  0000               	nop	
   150  0000E8  0000               	nop	
   151  0000EA  0000               	nop	
   152  0000EC  0000               	nop	
   153  0000EE  0000               	nop	
   154  0000F0  0000               	nop	
   155  0000F2  0000               	nop	
   156  0000F4  0000               	nop	
   157  0000F6  0000               	nop	
   158  0000F8  0000               	nop	
   159  0000FA  0000               	nop	
   160  0000FC  0000               	nop	
   161  0000FE  0000               	nop	
   162  000100  0000               	nop	
   163  000102  0000               	nop	
   164  000104  0000               	nop	
   165  000106  0000               	nop	
   166  000108  0000               	nop	
   167  00010A  0000               	nop	
   168  00010C  0000               	nop	
   169  00010E  0000               	nop	
   170  000110  0000               	nop	
   171  000112  84CB               	bsf	16331,2,c	; Set port to HIGH
   172  000114  0000               	nop	
   173  000116  0000               	nop	
   174  000118  0000               	nop	
   175  00011A  0000               	nop	
   176  00011C  0000               	nop	
   177  00011E  0000               	nop	
   178  000120  0000               	nop	
   179  000122  0000               	nop	
   180  000124  0000               	nop	
   181  000126  0000               	nop	
   182  000128                     getNextBit:
   183  000128  3632               	rlcf	_gConOutByte,f,c	; Rotate the byte left so we can read the next bit
   184  00012A  EF1A  F000         	goto	writeBit	; We still have bits left, so go back up to writeBit.
   185  00012E                     getNextByte:
   186  00012E  2A30               	incf	_gConOutIdx,f,c	; Increment our pointer value
   187  000130  2E31               	decfsz	_gConByteCount,f,c	; Decrement our Byte counter, skip when no bytes left to write our stop b
      +                          it.
   188  000132  EF12  F000         	goto	newByte
   189  000136  0000               	nop	
   190  000138  0000               	nop	
   191  00013A  0000               	nop	
   192  00013C  0000               	nop	
   193  00013E  0000               	nop	
   194  000140  0000               	nop	
   195  000142  0000               	nop	
   196  000144  0000               	nop	
   197  000146  0000               	nop	
   198  000148  0000               	nop	
   199  00014A  94CB               	bcf	16331,2,c	; Set port to LOW
   200  00014C  0000               	nop	
   201  00014E  0000               	nop	
   202  000150  0000               	nop	
   203  000152  0000               	nop	
   204  000154  0000               	nop	
   205  000156  0000               	nop	
   206  000158  0000               	nop	
   207  00015A  0000               	nop	
   208  00015C  0000               	nop	
   209  00015E  0000               	nop	
   210  000160  0000               	nop	
   211  000162  0000               	nop	
   212  000164  0000               	nop	
   213  000166  0000               	nop	
   214  000168  0000               	nop	
   215  00016A  0000               	nop	
   216  00016C  0000               	nop	
   217  00016E  0000               	nop	
   218  000170  0000               	nop	
   219  000172  0000               	nop	
   220  000174  0000               	nop	
   221  000176  0000               	nop	
   222  000178  0000               	nop	
   223  00017A  0000               	nop	
   224  00017C  0000               	nop	
   225  00017E  0000               	nop	
   226  000180  0000               	nop	
   227  000182  0000               	nop	
   228  000184  0000               	nop	
   229  000186  0000               	nop	
   230  000188  0000               	nop	
   231  00018A  0000               	nop	
   232  00018C  0000               	nop	
   233  00018E  84CB               	bsf	16331,2,c	; Set port to HIGH
   234  000190  8A2B               	bsf	_gInStatus,5,c	; Set byte 5 of our status flag
   235                           
   236                           ; Bit 5 says that we have sent out our response
   237  000192  0012               	return	
   238  000194                     endHighWrite:
   239  000194  0000               	nop	
   240  000196  0000               	nop	
   241  000198  0000               	nop	
   242  00019A  0000               	nop	
   243  00019C  0000               	nop	
   244  00019E  0000               	nop	
   245  0001A0  0000               	nop	
   246  0001A2  0000               	nop	
   247  0001A4  0000               	nop	
   248  0001A6  0000               	nop	
   249  0001A8  0000               	nop	
   250  0001AA  0000               	nop	
   251  0001AC  0000               	nop	
   252  0001AE  84CB               	bsf	16331,2,c	; Set port to HIGH
   253  0001B0  0000               	nop	
   254  0001B2  0000               	nop	
   255  0001B4  0000               	nop	
   256  0001B6  0000               	nop	
   257  0001B8  0000               	nop	
   258  0001BA  0000               	nop	
   259  0001BC  0000               	nop	
   260  0001BE  0000               	nop	
   261  0001C0  0000               	nop	
   262  0001C2  0000               	nop	
   263  0001C4  0000               	nop	
   264  0001C6  0000               	nop	
   265  0001C8  0000               	nop	
   266  0001CA  0000               	nop	
   267  0001CC  0000               	nop	
   268  0001CE  0000               	nop	
   269  0001D0  0000               	nop	
   270  0001D2  0000               	nop	
   271  0001D4  0000               	nop	
   272  0001D6  0000               	nop	
   273  0001D8  0000               	nop	
   274  0001DA  0000               	nop	
   275  0001DC  0000               	nop	
   276  0001DE  0000               	nop	
   277  0001E0  0000               	nop	
   278  0001E2  0000               	nop	
   279  0001E4  0000               	nop	
   280  0001E6  0000               	nop	
   281  0001E8  0000               	nop	
   282  0001EA  0000               	nop	
   283  0001EC  EF97  F000         	goto	getNextByte
   284  0001F0                     endLowWrite:
   285  0001F0  0000               	nop	
   286  0001F2  0000               	nop	
   287  0001F4  0000               	nop	
   288  0001F6  0000               	nop	
   289  0001F8  0000               	nop	
   290  0001FA  0000               	nop	
   291  0001FC  0000               	nop	
   292  0001FE  0000               	nop	
   293  000200  0000               	nop	
   294  000202  0000               	nop	
   295  000204  0000               	nop	
   296  000206  0000               	nop	
   297  000208  0000               	nop	
   298  00020A  0000               	nop	
   299  00020C  0000               	nop	
   300  00020E  0000               	nop	
   301  000210  0000               	nop	
   302  000212  0000               	nop	
   303  000214  0000               	nop	
   304  000216  0000               	nop	
   305  000218  0000               	nop	
   306  00021A  0000               	nop	
   307  00021C  0000               	nop	
   308  00021E  0000               	nop	
   309  000220  0000               	nop	
   310  000222  0000               	nop	
   311  000224  0000               	nop	
   312  000226  0000               	nop	
   313  000228  0000               	nop	
   314  00022A  0000               	nop	
   315  00022C  0000               	nop	
   316  00022E  0000               	nop	
   317  000230  0000               	nop	
   318  000232  0000               	nop	
   319  000234  0000               	nop	
   320  000236  0000               	nop	
   321  000238  0000               	nop	
   322  00023A  0000               	nop	
   323  00023C  0000               	nop	
   324  00023E  0000               	nop	
   325  000240  0000               	nop	
   326  000242  0000               	nop	
   327  000244  0000               	nop	
   328  000246  0000               	nop	
   329  000248  0000               	nop	
   330  00024A  0000               	nop	
   331  00024C  84CB               	bsf	16331,2,c	; Set port to HIGH
   332  00024E  EF97  F000         	goto	getNextByte
   333                           tosu	equ	0x3FFF
   334                           tosh	equ	0x3FFE
   335                           tosl	equ	0x3FFD
   336                           stkptr	equ	0x3FFC
   337                           pclatu	equ	0x3FFB
   338                           pclath	equ	0x3FFA
   339                           pcl	equ	0x3FF9
   340                           tblptru	equ	0x3FF8
   341                           tblptrh	equ	0x3FF7
   342                           tblptrl	equ	0x3FF6
   343                           tablat	equ	0x3FF5
   344                           prodh	equ	0x3FF4
   345                           prodl	equ	0x3FF3
   346                           indf0	equ	0x3FEF
   347                           postinc0	equ	0x3FEE
   348                           postdec0	equ	0x3FED
   349                           preinc0	equ	0x3FEC
   350                           plusw0	equ	0x3FEB
   351                           fsr0h	equ	0x3FEA
   352                           fsr0l	equ	0x3FE9
   353                           wreg	equ	0x3FE8
   354                           indf1	equ	0x3FE7
   355                           postinc1	equ	0x3FE6
   356                           postdec1	equ	0x3FE5
   357                           preinc1	equ	0x3FE4
   358                           plusw1	equ	0x3FE3
   359                           fsr1h	equ	0x3FE2
   360                           fsr1l	equ	0x3FE1
   361                           bsr	equ	0x3FE0
   362                           indf2	equ	0x3FDF
   363                           postinc2	equ	0x3FDE
   364                           postdec2	equ	0x3FDD
   365                           preinc2	equ	0x3FDC
   366                           plusw2	equ	0x3FDB
   367                           fsr2h	equ	0x3FDA
   368                           fsr2l	equ	0x3FD9
   369                           status	equ	0x3FD8


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                               Wed Jan 12 14:48:32 2022

                          FSR0 003FE9                           INDF0 003FEF                           PORTB 003FCB  
                         TRISB 003FC3                     _gConOutIdx 0030                         isa$std 000001  
                       newByte 0024                 _gConBitCounter 004B                    _gConOutByte 0032  
                   endLowWrite 01F0                     getNextByte 012E                        writeBit 0034  
                    _gInStatus 002B                    stopBitWrite 0136                     lowBitWrite 00B2  
                _gConByteCount 0031                      getNextBit 0128                    _bytecleanup 07DC  
                     _bytepush 001E                       isa$xinst 000000                    endHighWrite 0194  
                  highBitWrite 003C  
