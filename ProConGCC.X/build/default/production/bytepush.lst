

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                                           Tue Jan 18 20:24:52 2022


     1                           	processor	18F25K42
     2                           	pagewidth 132
     3                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     4                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    11                           	psect	udata_bank7,global,class=BANK7,space=1,delta=1,lowdata,noexec
    12                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    13                           	psect	code,global,reloc=2,class=CODE,delta=1
    14                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    15                           	psect	edata,global,class=EEDATA,space=3,delta=2,noexec
    16                           	psect	barfunc,local,reloc=2,class=CODE,delta=1
    17  0000                     
    18                           	psect	edata
    19  0000                     stk_offset	set	0
    20  0000                     auto_size	set	0
    21                           
    22                           ; stack_auto defines a symbol /name/_offset which equates to the
    23                           ; stack offset of the auto object in question
    24  000000                     
    25                           ; stack_param defines a symbol /name/_offset which equates to the
    26                           ; stack offset of the parameter object in question
    27  000000                     
    28                           ; alloc_stack adjusts the SP to allocate space for auto objects
    29                           ; it also links in to the btemp symbol so that can be used
    30  000000                     
    31                           ; restore_stack adjusts the SP to remove all auto and parameter
    32                           ; objects from the stack prior to returning from a function
    33  000000                     
    34                           ; When assembly code is placed in a psect, it can be manipulated as a
    35                           ; whole by the linker and placed in memory.
    36                           ;
    37                           ; In this example, barfunc is the program section (psect) name, 'local' means
    38                           ; that the section will not be combined with other sections even if they have
    39                           ; the same name. class=CODE means the barfunc must go in the CODE container.
    40                           ; PIC18's should have a delta (addressible unit size) of 1 (default) since they
    41                           ; are byte addressible. PIC10/12/16's have a delta of 2 since they are word
    42                           ; addressible. PIC18's should have a reloc (alignment) flag of 2 for any
    43                           ; psect which contains executable code. PIC10/12/16's can use the default
    44                           ; reloc value of 1. Use one of the psects below for the device you use:
    45                           ; psect barfunc,local,class=CODE,delta=2 ; PIC10/12/16
    46                           
    47                           	psect	barfunc
    48  000AE0                     _bytepush:
    49                           	callstack 0
    50                           
    51                           ; Check if we have a command to push out
    52  000AE0  AC53               	btfss	_gInStatus,6,c	; Byte 6 tells us if a command has been interpreted
    53  000AE2  0012               	return		; Return if there's no command to push out
    54  000AE4  94C3               	bcf	16323,2,c	; Turn the data pin around so we can drive
    55  000AE6                     newByte:
    56  000AE6  0060  F0B3  FFE9   	movff	_gConOutIdx,fsr0l	; Get the address for our first byte, place into FSR0
    57  000AEC  006F FFBC  F02E    	movff	indf0,_gConOutByte	; Set the outgoing byte with the first byte.
    58  000AF2  6A55               	clrf	_gConBitCounter,c	; Set bit counter to 0 (clear)
    59  000AF4  8655               	bsf	_gConBitCounter,3,c	; Set bit counter to 8.
    60  000AF6                     writeBit:
    61  000AF6  94CB               	bcf	16331,2,c	; Set port to LOW
    62  000AF8  AE2E               	btfss	_gConOutByte,7,c	; Check the leftmost bit, skip if one.
    63  000AFA  EFBA  F005         	goto	lowBitWrite	; Bit is 0, write a low bit out.
    64  000AFE                     
    65                           ;
    66  000AFE  4E55               	dcfsnz	_gConBitCounter,f,c	; Decrement the BIT counter. Skip next when NOT 0 to go to next bit
    67  000B00  EF2B  F006         	goto	endHighWrite
    68  000B04  0000               	nop	
    69  000B06  0000               	nop	
    70  000B08  0000               	nop	
    71  000B0A  0000               	nop	
    72  000B0C  0000               	nop	
    73  000B0E  0000               	nop	
    74  000B10  0000               	nop	
    75  000B12  0000               	nop	
    76  000B14  0000               	nop	
    77  000B16  0000               	nop	
    78  000B18  0000               	nop	
    79  000B1A  0000               	nop	
    80  000B1C  0000               	nop	
    81  000B1E  0000               	nop	
    82  000B20  84CB               	bsf	16331,2,c	; Set port to HIGH
    83  000B22  0000               	nop	
    84  000B24  0000               	nop	
    85  000B26  0000               	nop	
    86  000B28  0000               	nop	
    87  000B2A  0000               	nop	
    88  000B2C  0000               	nop	
    89  000B2E  0000               	nop	
    90  000B30  0000               	nop	
    91  000B32  0000               	nop	
    92  000B34  0000               	nop	
    93  000B36  0000               	nop	
    94  000B38  0000               	nop	
    95  000B3A  0000               	nop	
    96  000B3C  0000               	nop	
    97  000B3E  0000               	nop	
    98  000B40  0000               	nop	
    99  000B42  0000               	nop	
   100  000B44  0000               	nop	
   101  000B46  0000               	nop	
   102  000B48  0000               	nop	
   103  000B4A  0000               	nop	
   104  000B4C  0000               	nop	
   105  000B4E  0000               	nop	
   106  000B50  0000               	nop	
   107  000B52  0000               	nop	
   108  000B54  0000               	nop	
   109  000B56  0000               	nop	
   110  000B58  0000               	nop	
   111  000B5A  0000               	nop	
   112  000B5C  0000               	nop	
   113  000B5E  0000               	nop	
   114  000B60  0000               	nop	
   115  000B62  0000               	nop	
   116  000B64  0000               	nop	
   117  000B66  0000               	nop	
   118  000B68  0000               	nop	
   119  000B6A  0000               	nop	
   120  000B6C  0000               	nop	
   121  000B6E  0000               	nop	
   122  000B70  EFF5  F005         	goto	getNextBit
   123  000B74                     lowBitWrite:
   124  000B74  4E55               	dcfsnz	_gConBitCounter,f,c	; Decrement the BIT counter. Skip next when NOT 0 to go to next bit
   125  000B76  EF59  F006         	goto	endLowWrite
   126  000B7A  0000               	nop	
   127  000B7C  0000               	nop	
   128  000B7E  0000               	nop	
   129  000B80  0000               	nop	
   130  000B82  0000               	nop	
   131  000B84  0000               	nop	
   132  000B86  0000               	nop	
   133  000B88  0000               	nop	
   134  000B8A  0000               	nop	
   135  000B8C  0000               	nop	
   136  000B8E  0000               	nop	
   137  000B90  0000               	nop	
   138  000B92  0000               	nop	
   139  000B94  0000               	nop	
   140  000B96  0000               	nop	
   141  000B98  0000               	nop	
   142  000B9A  0000               	nop	
   143  000B9C  0000               	nop	
   144  000B9E  0000               	nop	
   145  000BA0  0000               	nop	
   146  000BA2  0000               	nop	
   147  000BA4  0000               	nop	
   148  000BA6  0000               	nop	
   149  000BA8  0000               	nop	
   150  000BAA  0000               	nop	
   151  000BAC  0000               	nop	
   152  000BAE  0000               	nop	
   153  000BB0  0000               	nop	
   154  000BB2  0000               	nop	
   155  000BB4  0000               	nop	
   156  000BB6  0000               	nop	
   157  000BB8  0000               	nop	
   158  000BBA  0000               	nop	
   159  000BBC  0000               	nop	
   160  000BBE  0000               	nop	
   161  000BC0  0000               	nop	
   162  000BC2  0000               	nop	
   163  000BC4  0000               	nop	
   164  000BC6  0000               	nop	
   165  000BC8  0000               	nop	
   166  000BCA  0000               	nop	
   167  000BCC  0000               	nop	
   168  000BCE  0000               	nop	
   169  000BD0  0000               	nop	
   170  000BD2  0000               	nop	
   171  000BD4  84CB               	bsf	16331,2,c	; Set port to HIGH
   172  000BD6  0000               	nop	
   173  000BD8  0000               	nop	
   174  000BDA  0000               	nop	
   175  000BDC  0000               	nop	
   176  000BDE  0000               	nop	
   177  000BE0  0000               	nop	
   178  000BE2  0000               	nop	
   179  000BE4  0000               	nop	
   180  000BE6  0000               	nop	
   181  000BE8  0000               	nop	
   182  000BEA                     getNextBit:
   183  000BEA  362E               	rlcf	_gConOutByte,f,c	; Rotate the byte left so we can read the next bit
   184  000BEC  EF7B  F005         	goto	writeBit	; We still have bits left, so go back up to writeBit.
   185  000BF0                     getNextByte:
   186  000BF0  2A2C               	incf	_gConOutIdx,f,c	; Increment our pointer value
   187  000BF2  2E2D               	decfsz	_gConByteCount,f,c	; Decrement our Byte counter, skip when no bytes left to write our stop b
      +                          it.
   188  000BF4  EF73  F005         	goto	newByte
   189  000BF8  0000               	nop	
   190  000BFA  0000               	nop	
   191  000BFC  0000               	nop	
   192  000BFE  0000               	nop	
   193  000C00  0000               	nop	
   194  000C02  0000               	nop	
   195  000C04  0000               	nop	
   196  000C06  0000               	nop	
   197  000C08  0000               	nop	
   198  000C0A  0000               	nop	
   199  000C0C  94CB               	bcf	16331,2,c	; Set port to LOW
   200  000C0E  0000               	nop	
   201  000C10  0000               	nop	
   202  000C12  0000               	nop	
   203  000C14  0000               	nop	
   204  000C16  0000               	nop	
   205  000C18  0000               	nop	
   206  000C1A  0000               	nop	
   207  000C1C  0000               	nop	
   208  000C1E  0000               	nop	
   209  000C20  0000               	nop	
   210  000C22  0000               	nop	
   211  000C24  0000               	nop	
   212  000C26  0000               	nop	
   213  000C28  0000               	nop	
   214  000C2A  0000               	nop	
   215  000C2C  0000               	nop	
   216  000C2E  0000               	nop	
   217  000C30  0000               	nop	
   218  000C32  0000               	nop	
   219  000C34  0000               	nop	
   220  000C36  0000               	nop	
   221  000C38  0000               	nop	
   222  000C3A  0000               	nop	
   223  000C3C  0000               	nop	
   224  000C3E  0000               	nop	
   225  000C40  0000               	nop	
   226  000C42  0000               	nop	
   227  000C44  0000               	nop	
   228  000C46  0000               	nop	
   229  000C48  0000               	nop	
   230  000C4A  0000               	nop	
   231  000C4C  0000               	nop	
   232  000C4E  0000               	nop	
   233  000C50  84CB               	bsf	16331,2,c	; Set port to HIGH
   234  000C52  8A53               	bsf	_gInStatus,5,c	; Set byte 5 of our status flag
   235                           
   236                           ; Bit 5 says that we have sent out our response
   237  000C54  0012               	return	
   238  000C56                     endHighWrite:
   239  000C56  0000               	nop	
   240  000C58  0000               	nop	
   241  000C5A  0000               	nop	
   242  000C5C  0000               	nop	
   243  000C5E  0000               	nop	
   244  000C60  0000               	nop	
   245  000C62  0000               	nop	
   246  000C64  0000               	nop	
   247  000C66  0000               	nop	
   248  000C68  0000               	nop	
   249  000C6A  0000               	nop	
   250  000C6C  0000               	nop	
   251  000C6E  0000               	nop	
   252  000C70  84CB               	bsf	16331,2,c	; Set port to HIGH
   253  000C72  0000               	nop	
   254  000C74  0000               	nop	
   255  000C76  0000               	nop	
   256  000C78  0000               	nop	
   257  000C7A  0000               	nop	
   258  000C7C  0000               	nop	
   259  000C7E  0000               	nop	
   260  000C80  0000               	nop	
   261  000C82  0000               	nop	
   262  000C84  0000               	nop	
   263  000C86  0000               	nop	
   264  000C88  0000               	nop	
   265  000C8A  0000               	nop	
   266  000C8C  0000               	nop	
   267  000C8E  0000               	nop	
   268  000C90  0000               	nop	
   269  000C92  0000               	nop	
   270  000C94  0000               	nop	
   271  000C96  0000               	nop	
   272  000C98  0000               	nop	
   273  000C9A  0000               	nop	
   274  000C9C  0000               	nop	
   275  000C9E  0000               	nop	
   276  000CA0  0000               	nop	
   277  000CA2  0000               	nop	
   278  000CA4  0000               	nop	
   279  000CA6  0000               	nop	
   280  000CA8  0000               	nop	
   281  000CAA  0000               	nop	
   282  000CAC  0000               	nop	
   283  000CAE  EFF8  F005         	goto	getNextByte
   284  000CB2                     endLowWrite:
   285  000CB2  0000               	nop	
   286  000CB4  0000               	nop	
   287  000CB6  0000               	nop	
   288  000CB8  0000               	nop	
   289  000CBA  0000               	nop	
   290  000CBC  0000               	nop	
   291  000CBE  0000               	nop	
   292  000CC0  0000               	nop	
   293  000CC2  0000               	nop	
   294  000CC4  0000               	nop	
   295  000CC6  0000               	nop	
   296  000CC8  0000               	nop	
   297  000CCA  0000               	nop	
   298  000CCC  0000               	nop	
   299  000CCE  0000               	nop	
   300  000CD0  0000               	nop	
   301  000CD2  0000               	nop	
   302  000CD4  0000               	nop	
   303  000CD6  0000               	nop	
   304  000CD8  0000               	nop	
   305  000CDA  0000               	nop	
   306  000CDC  0000               	nop	
   307  000CDE  0000               	nop	
   308  000CE0  0000               	nop	
   309  000CE2  0000               	nop	
   310  000CE4  0000               	nop	
   311  000CE6  0000               	nop	
   312  000CE8  0000               	nop	
   313  000CEA  0000               	nop	
   314  000CEC  0000               	nop	
   315  000CEE  0000               	nop	
   316  000CF0  0000               	nop	
   317  000CF2  0000               	nop	
   318  000CF4  0000               	nop	
   319  000CF6  0000               	nop	
   320  000CF8  0000               	nop	
   321  000CFA  0000               	nop	
   322  000CFC  0000               	nop	
   323  000CFE  0000               	nop	
   324  000D00  0000               	nop	
   325  000D02  0000               	nop	
   326  000D04  0000               	nop	
   327  000D06  0000               	nop	
   328  000D08  0000               	nop	
   329  000D0A  0000               	nop	
   330  000D0C  0000               	nop	
   331  000D0E  84CB               	bsf	16331,2,c	; Set port to HIGH
   332  000D10  EFF8  F005         	goto	getNextByte
   333                           tosu	equ	0x3FFF
   334                           tosh	equ	0x3FFE
   335                           tosl	equ	0x3FFD
   336                           stkptr	equ	0x3FFC
   337                           pclatu	equ	0x3FFB
   338                           pclath	equ	0x3FFA
   339                           pcl	equ	0x3FF9
   340                           tblptru	equ	0x3FF8
   341                           tblptrh	equ	0x3FF7
   342                           tblptrl	equ	0x3FF6
   343                           tablat	equ	0x3FF5
   344                           prodh	equ	0x3FF4
   345                           prodl	equ	0x3FF3
   346                           indf0	equ	0x3FEF
   347                           postinc0	equ	0x3FEE
   348                           postdec0	equ	0x3FED
   349                           preinc0	equ	0x3FEC
   350                           plusw0	equ	0x3FEB
   351                           fsr0h	equ	0x3FEA
   352                           fsr0l	equ	0x3FE9
   353                           wreg	equ	0x3FE8
   354                           indf1	equ	0x3FE7
   355                           postinc1	equ	0x3FE6
   356                           postdec1	equ	0x3FE5
   357                           preinc1	equ	0x3FE4
   358                           plusw1	equ	0x3FE3
   359                           fsr1h	equ	0x3FE2
   360                           fsr1l	equ	0x3FE1
   361                           bsr	equ	0x3FE0
   362                           indf2	equ	0x3FDF
   363                           postinc2	equ	0x3FDE
   364                           postdec2	equ	0x3FDD
   365                           preinc2	equ	0x3FDC
   366                           plusw2	equ	0x3FDB
   367                           fsr2h	equ	0x3FDA
   368                           fsr2l	equ	0x3FD9
   369                           status	equ	0x3FD8


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                               Tue Jan 18 20:24:52 2022

                          FSR0 003FE9                           INDF0 003FEF                           PORTB 003FCB  
                         TRISB 003FC3                     _gConOutIdx 002C                         isa$std 000001  
                       newByte 0AE6                 _gConBitCounter 0055                    _gConOutByte 002E  
                   endLowWrite 0CB2                     getNextByte 0BF0                        writeBit 0AF6  
                    _gInStatus 0053                    stopBitWrite 0BF8                     lowBitWrite 0B74  
                _gConByteCount 002D                      getNextBit 0BEA                    _bytecleanup 1722  
                     _bytepush 0AE0                       isa$xinst 000000                    endHighWrite 0C56  
                  highBitWrite 0AFE  
