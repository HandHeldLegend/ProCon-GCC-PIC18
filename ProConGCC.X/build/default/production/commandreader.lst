

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                                           Tue Jan 11 13:39:51 2022


     1                           	processor	18F25K42
     2                           	pagewidth 132
     3                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     4                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    11                           	psect	udata_bank7,global,class=BANK7,space=1,delta=1,lowdata,noexec
    12                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    13                           	psect	code,global,reloc=2,class=CODE,delta=1
    14                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    15                           	psect	edata,global,class=EEDATA,space=3,delta=2,noexec
    16                           	psect	barfunc,local,reloc=2,class=CODE,delta=1
    17  0000                     
    18                           	psect	edata
    19  0000                     stk_offset	set	0
    20  0000                     auto_size	set	0
    21                           
    22                           ; stack_auto defines a symbol /name/_offset which equates to the
    23                           ; stack offset of the auto object in question
    24  000000                     
    25                           ; stack_param defines a symbol /name/_offset which equates to the
    26                           ; stack offset of the parameter object in question
    27  000000                     
    28                           ; alloc_stack adjusts the SP to allocate space for auto objects
    29                           ; it also links in to the btemp symbol so that can be used
    30  000000                     
    31                           ; restore_stack adjusts the SP to remove all auto and parameter
    32                           ; objects from the stack prior to returning from a function
    33  000000                     
    34                           ; Variables relating to bitgrabber incoming data
    35                           ; Variables relating to checking commands
    36                           ; Variables used to set up our bytepusher
    37                           ; Variables for outgoing responses, canned and assembled
    38                           ; External function
    39                           
    40                           	psect	barfunc
    41  000638                     _commandreader:
    42                           	callstack 0
    43                           
    44                           ; This function should run in the main loop.
    45                           ; When it detects that a stop bit has been written,
    46                           ; we can take action to quickly interpret the message
    47                           ; and send out the corresponding packet.
    48                           ; First let's check if the stop bit write flag is set
    49  000638  AE2B               	btfss	_gInStatus,7,c	; Byte 7 in the status is the stop bit flag
    50  00063A  0012               	return		; Return if there's no command to read
    51                           
    52                           ; WE WILL CLEAN UP LATER, JUST GET ON TO SENDING OUT THE RIGHT PACKS ASAP
    53                           ; Since the most high priority (performance-wise) command will be polling
    54                           ; which is where our button inputs are sent back, we should 100% check for this
    55                           ; first and foremost. We want as little delay as possible in polling as we have about
    56                           ; 600 MICROSECONDS to grab our button and stick updates before the next poll.
    57                           ; Less delay between poll command and our response means... more time for button updates =)
    58  00063C  013F               	movlb	63	; Switch to bank 0x3F
    59  00063E  9FD2               	bcf	210,7,b	; Stop global interrupts
    60  000640  9F1F               	bcf	31,7,b	; Stop SMT
    61                           
    62                           ; Check to see if we have a poll command coming in
    63  000642  0EB6               	movlw	_gInPacket	; Get the address for our in packet
    64  000644  006F FFA3 FFE9     	movff	wreg,fsr0l	; Copy our new pointer into FSR0. Access with INDF0
    65  00064A  50EF               	movf	indf0,w,c
    66  00064C  1849               	xorwf	_gCommandPollMask,w,c	; Perform exclusive OR on the command byte against our mask
    67                           
    68                           ; If the mask is a match, the result will be 1111 1111. Incrementing this will produce 0.
    69                           ; Anything that ISN'T a match will fail the check zero/skip command.
    70  00064E  3CE8               	incfsz	wreg,w,c	; Increment and skip if it's zero.
    71  000650  EF2F  F003         	goto	ORIGINPARSE	; We did not match, so now we check if it's an origin command.
    72                           
    73                           ; If we made it to here, we are working with a poll command.
    74                           ; Lets set up the outgoing byte as a pointer for the bytepush command.
    75  000654  0E33               	movlw	_gConPollPacket	; Get the pointer for the poll packet
    76  000656  6E30               	movwf	_gConOutIdx,c	; Move the pointer into the outgoing index.
    77  000658  8631               	bsf	_gConByteCount,3,c	; Set our outgoing Byte count to 8 (bit set 3) 0000 1000
    78  00065A  8C2B               	bsf	_gInStatus,6,c	; Mark that we have a command interpreted
    79  00065C  0012               	return	
    80  00065E                     ORIGINPARSE:
    81  00065E  50EF               	movf	indf0,w,c	; Copy our command byte data into WREG.
    82  000660  184A               	xorwf	_gCommandOriginMask,w,c	; Perform exclusive OR on the command byte against our mask
    83                           
    84                           ; If the mask is a match, the result will be 1111 1111. Incrementing this will produce 0.
    85                           ; Anything that ISN'T a match will fail the check zero/skip command.
    86  000662  3CE8               	incfsz	wreg,w,c	; Increment and skip if it's zero.
    87  000664  EF3A  F003         	goto	PROBEPARSE	; We did not match, so now we check if it's a probe command.
    88                           
    89                           ; If we made it to here, we are working with a origin command.
    90                           ; Lets set up the outgoing byte as a pointer for the bytepush command.
    91  000668  0E8B               	movlw	_gConOriginResponse	; Get the pointer for the poll packet
    92  00066A  6E30               	movwf	_gConOutIdx,c	; Move the pointer into the outgoing index.
    93  00066C  8631               	bsf	_gConByteCount,3,c	; Set our outgoing Byte count to 8 (bit set 3) 0000 1000
    94  00066E  8231               	bsf	_gConByteCount,1,c	; Set the bit 1 so we have 10 (8+2) 0000 1010
    95  000670  8C2B               	bsf	_gInStatus,6,c	; Mark that we have a command interpreted
    96  000672  0012               	return	
    97  000674                     PROBEPARSE:
    98                           
    99                           ; First we can check if the command is 0x0 (0000 0000) meaning it's being probed.
   100  000674  50EF               	movf	indf0,w,c
   101  000676  66E8               	tstfsz	wreg,c	; If it's zero, skip checking any further
   102  000678  EF45  F003         	goto	NOCOMMAND	; No command match
   103                           
   104                           ; We need to make sure our byte counter for outgoing is set
   105  00067C  8031               	bsf	_gConByteCount,0,c	; Set our outgoing Byte count to 1 (bit set 0) 0000 0001
   106  00067E  8231               	bsf	_gConByteCount,1,c	; Set the bit 1 so we have 3 (1+2) 0000 0011
   107  000680  0E95               	movlw	_gConProbeResponse	; Place the address for our first byte into WREG
   108  000682  6E30               	movwf	_gConOutIdx,c	;
   109                           
   110                           ; Mark our status bit that we are synced
   111  000684  822B               	bsf	_gInStatus,1,c	; Bit 1 is sync bit
   112  000686  8C2B               	bsf	_gInStatus,6,c	; Mark that we have a command interpreted
   113  000688  0012               	return	
   114  00068A                     NOCOMMAND:
   115  00068A  8A2B               	bsf	_gInStatus,5,c	; Set byte 5 of our status flag meaning we need cleanup
   116  00068C  0012               	return	
   117                           tosu	equ	0x3FFF
   118                           tosh	equ	0x3FFE
   119                           tosl	equ	0x3FFD
   120                           stkptr	equ	0x3FFC
   121                           pclatu	equ	0x3FFB
   122                           pclath	equ	0x3FFA
   123                           pcl	equ	0x3FF9
   124                           tblptru	equ	0x3FF8
   125                           tblptrh	equ	0x3FF7
   126                           tblptrl	equ	0x3FF6
   127                           tablat	equ	0x3FF5
   128                           prodh	equ	0x3FF4
   129                           prodl	equ	0x3FF3
   130                           indf0	equ	0x3FEF
   131                           postinc0	equ	0x3FEE
   132                           postdec0	equ	0x3FED
   133                           preinc0	equ	0x3FEC
   134                           plusw0	equ	0x3FEB
   135                           fsr0h	equ	0x3FEA
   136                           fsr0l	equ	0x3FE9
   137                           wreg	equ	0x3FE8
   138                           indf1	equ	0x3FE7
   139                           postinc1	equ	0x3FE6
   140                           postdec1	equ	0x3FE5
   141                           preinc1	equ	0x3FE4
   142                           plusw1	equ	0x3FE3
   143                           fsr1h	equ	0x3FE2
   144                           fsr1l	equ	0x3FE1
   145                           bsr	equ	0x3FE0
   146                           indf2	equ	0x3FDF
   147                           postinc2	equ	0x3FDE
   148                           postdec2	equ	0x3FDD
   149                           preinc2	equ	0x3FDC
   150                           plusw2	equ	0x3FDB
   151                           fsr2h	equ	0x3FDA
   152                           fsr2l	equ	0x3FD9
   153                           status	equ	0x3FD8


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                               Tue Jan 11 13:39:51 2022

                          FSR0 003FE9                            WREG 003FE8                           INDF0 003FEF  
                         _main 07A6                     _gConOutIdx 0030                         isa$std 000001  
                    PROBEPARSE 0674               _gCommandPollMask 0049                 _gConPollPacket 0033  
           _gCommandOriginMask 004A                _gInBitBufferIdx 002F              _gConProbeResponse 0095  
                    _gInPacket 00B6                      _gInStatus 002B                     ORIGINPARSE 065E  
                     NOCOMMAND 068A                  _gConByteCount 0031                   _gInBitBuffer 0100  
                  _bytecleanup 0770             _gConOriginResponse 008B                   _gInPacketIdx 002C  
                     _bytepush 001E                       isa$xinst 000000                  _commandreader 0638  
