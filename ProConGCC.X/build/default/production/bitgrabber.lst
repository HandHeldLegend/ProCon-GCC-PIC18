

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                                           Thu Jan 13 11:56:48 2022


     1                           	processor	18F25K42
     2                           	pagewidth 132
     3                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     4                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    11                           	psect	udata_bank7,global,class=BANK7,space=1,delta=1,lowdata,noexec
    12                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    13                           	psect	code,global,reloc=2,class=CODE,delta=1
    14                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    15                           	psect	edata,global,class=EEDATA,space=3,delta=2,noexec
    16                           	psect	barfunc,local,reloc=2,class=CODE,delta=1
    17  0000                     
    18                           	psect	edata
    19  0000                     stk_offset	set	0
    20  0000                     auto_size	set	0
    21                           
    22                           ; stack_auto defines a symbol /name/_offset which equates to the
    23                           ; stack offset of the auto object in question
    24  0000'                    
    25                           ; stack_param defines a symbol /name/_offset which equates to the
    26                           ; stack offset of the parameter object in question
    27  0000'                    
    28                           ; alloc_stack adjusts the SP to allocate space for auto objects
    29                           ; it also links in to the btemp symbol so that can be used
    30  0000'                    
    31                           ; restore_stack adjusts the SP to remove all auto and parameter
    32                           ; objects from the stack prior to returning from a function
    33  0000'                    
    34                           	psect	barfunc
    35  0000'                    _bitgrabber:
    36                           	callstack 0
    37  0000' 0060' F000' FFE9   	movff	_gInPacketIdx,fsr0l	; Copy the address into FSR0 for indirect addressing via INDF0
    38                           
    39                           ; Don't set the bit since we aren't putting anything there anyways
    40  0006' B600'              	btfsc	_gInBitCounter,3,c
    41  0008' EF00' F000'        	goto	FIRSTBIT	; We are out of bits. Set up for the next byte
    42  000C' 46EF               	rlncf	indf0,f,c	; Rotate the current byte to the left by 1.
    43                           
    44                           ; This is when checking any other bit
    45  000E' 90EF               	bcf	indf0,0,c	; Zero the rightmost bit.
    46  0010' 0060' F000' FFE8   	movff	_gInPulseWidth,wreg
    47                           
    48                           ; This compares gLowThreshold to the captured pulse width.
    49                           ; If the low threshold is more than the pulse width, the pulse was short
    50                           ; meaning we have a HIGH bit.
    51  0016' 6000'              	cpfslt	_gLowThreshold,c	; if the pulse is more than the low threshold, Skip.
    52  0018' 80EF               	bsf	indf0,0,c	; Set the rightmost bit.
    53  001A' EF00' F000'        	goto	BITCOMPLETE
    54  001E'                    FIRSTBIT:
    55  001E' 0060' F000' FFE8   	movff	_gInPulseWidth,wreg
    56                           
    57                           ; This compares gLowThreshold to the captured pulse width.
    58                           ; If the low threshold is more than the pulse width, the pulse was short
    59                           ; meaning we have a HIGH bit.
    60  0024' 6000'              	cpfslt	_gLowThreshold,c	; if the pulse is more than the low threshold, Skip.
    61  0026' EF00' F000'        	goto	COMMANDCOMPLETE
    62  002A' 90EF               	bcf	indf0,0,c	; Zero the rightmost bit.
    63  002C'                    BITCOMPLETE:
    64                           
    65                           ; Run this after a bit is set to prepare us for the next bit
    66  002C' 4E00'              	dcfsnz	_gInBitCounter,f,c	; Decrement the bit counter. 8 bits total. Skip if we're not at 0
    67  002E' EF00' F000'        	goto	NEXTBYTE
    68  0032' 0012               	return		; RETURN. Not time for cleanup yet so we leave everything as-is.
    69  0034'                    NEXTBYTE:
    70  0034' 2A00'              	incf	_gInPacketIdx,f,c	; Increment our address pointer to get the next byte
    71  0036' 8600'              	bsf	_gInBitCounter,3,c	; Set the bit counter to 0x8 by flagging one byte
    72  0038' 0012               	return		; We're done until the next bit read. Return. No cleanup yet.
    73  003A'                    COMMANDCOMPLETE:
    74                           
    75                           ; If we made it here, our command is fully built and
    76                           ; we should mark it for the interpreter
    77  003A' 8E00'              	bsf	_gInStatus,7,c	; Set the status flag for stop bit written
    78  003C' 0012               	return	
    79                           tosu	equ	0x3FFF
    80                           tosh	equ	0x3FFE
    81                           tosl	equ	0x3FFD
    82                           stkptr	equ	0x3FFC
    83                           pclatu	equ	0x3FFB
    84                           pclath	equ	0x3FFA
    85                           pcl	equ	0x3FF9
    86                           tblptru	equ	0x3FF8
    87                           tblptrh	equ	0x3FF7
    88                           tblptrl	equ	0x3FF6
    89                           tablat	equ	0x3FF5
    90                           prodh	equ	0x3FF4
    91                           prodl	equ	0x3FF3
    92                           indf0	equ	0x3FEF
    93                           postinc0	equ	0x3FEE
    94                           postdec0	equ	0x3FED
    95                           preinc0	equ	0x3FEC
    96                           plusw0	equ	0x3FEB
    97                           fsr0h	equ	0x3FEA
    98                           fsr0l	equ	0x3FE9
    99                           wreg	equ	0x3FE8
   100                           indf1	equ	0x3FE7
   101                           postinc1	equ	0x3FE6
   102                           postdec1	equ	0x3FE5
   103                           preinc1	equ	0x3FE4
   104                           plusw1	equ	0x3FE3
   105                           fsr1h	equ	0x3FE2
   106                           fsr1l	equ	0x3FE1
   107                           bsr	equ	0x3FE0
   108                           indf2	equ	0x3FDF
   109                           postinc2	equ	0x3FDE
   110                           postdec2	equ	0x3FDD
   111                           preinc2	equ	0x3FDC
   112                           plusw2	equ	0x3FDB
   113                           fsr2h	equ	0x3FDA
   114                           fsr2l	equ	0x3FD9
   115                           status	equ	0x3FD8


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                               Thu Jan 13 11:56:48 2022

                          FSR0 003FE9                 COMMANDCOMPLETE 00003A                            WREG 003FE8  
                         INDF0 003FEF                  _gLowThreshold 000000*                        isa$std 000001  
                      FIRSTBIT 00001E                        NEXTBYTE 000034                     _bitgrabber 000000  
                   BITCOMPLETE 00002C                      _gInPacket 000000*                 _gInBitCounter 000000* 
                    _gInStatus 000000*                 _gInPulseWidth 000000*                  _gInPacketIdx 000000* 
                     isa$xinst 000000  
