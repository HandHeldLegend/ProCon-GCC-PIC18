

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                                           Tue Jan 18 14:08:49 2022


     1                           	processor	18F25K42
     2                           	pagewidth 132
     3                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     4                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    11                           	psect	udata_bank7,global,class=BANK7,space=1,delta=1,lowdata,noexec
    12                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    13                           	psect	code,global,reloc=2,class=CODE,delta=1
    14                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    15                           	psect	edata,global,class=EEDATA,space=3,delta=2,noexec
    16                           	psect	barfunc,local,reloc=2,class=CODE,delta=1
    17  0000                     
    18                           	psect	edata
    19  0000                     stk_offset	set	0
    20  0000                     auto_size	set	0
    21                           
    22                           ; stack_auto defines a symbol /name/_offset which equates to the
    23                           ; stack offset of the auto object in question
    24  000000                     
    25                           ; stack_param defines a symbol /name/_offset which equates to the
    26                           ; stack offset of the parameter object in question
    27  000000                     
    28                           ; alloc_stack adjusts the SP to allocate space for auto objects
    29                           ; it also links in to the btemp symbol so that can be used
    30  000000                     
    31                           ; restore_stack adjusts the SP to remove all auto and parameter
    32                           ; objects from the stack prior to returning from a function
    33  000000                     
    34                           ; When assembly code is placed in a psect, it can be manipulated as a
    35                           ; whole by the linker and placed in memory.
    36                           ;
    37                           ; In this example, barfunc is the program section (psect) name, 'local' means
    38                           ; that the section will not be combined with other sections even if they have
    39                           ; the same name. class=CODE means the barfunc must go in the CODE container.
    40                           ; PIC18's should have a delta (addressible unit size) of 1 (default) since they
    41                           ; are byte addressible. PIC10/12/16's have a delta of 2 since they are word
    42                           ; addressible. PIC18's should have a reloc (alignment) flag of 2 for any
    43                           ; psect which contains executable code. PIC10/12/16's can use the default
    44                           ; reloc value of 1. Use one of the psects below for the device you use:
    45                           ; psect barfunc,local,class=CODE,delta=2 ; PIC10/12/16
    46                           
    47                           	psect	barfunc
    48  000A56                     _bytepush:
    49                           	callstack 0
    50                           
    51                           ; Check if we have a command to push out
    52  000A56  AC46               	btfss	_gInStatus,6,c	; Byte 6 tells us if a command has been interpreted
    53  000A58  0012               	return		; Return if there's no command to push out
    54  000A5A  94C3               	bcf	16323,2,c	; Turn the data pin around so we can drive
    55  000A5C                     newByte:
    56  000A5C  0060  F0B3  FFE9   	movff	_gConOutIdx,fsr0l	; Get the address for our first byte, place into FSR0
    57  000A62  006F FFBC  F02E    	movff	indf0,_gConOutByte	; Set the outgoing byte with the first byte.
    58  000A68  6A48               	clrf	_gConBitCounter,c	; Set bit counter to 0 (clear)
    59  000A6A  8648               	bsf	_gConBitCounter,3,c	; Set bit counter to 8.
    60  000A6C                     writeBit:
    61  000A6C  94CB               	bcf	16331,2,c	; Set port to LOW
    62  000A6E  AE2E               	btfss	_gConOutByte,7,c	; Check the leftmost bit, skip if one.
    63  000A70  EF75  F005         	goto	lowBitWrite	; Bit is 0, write a low bit out.
    64  000A74                     
    65                           ;
    66  000A74  4E48               	dcfsnz	_gConBitCounter,f,c	; Decrement the BIT counter. Skip next when NOT 0 to go to next bit
    67  000A76  EFE6  F005         	goto	endHighWrite
    68  000A7A  0000               	nop	
    69  000A7C  0000               	nop	
    70  000A7E  0000               	nop	
    71  000A80  0000               	nop	
    72  000A82  0000               	nop	
    73  000A84  0000               	nop	
    74  000A86  0000               	nop	
    75  000A88  0000               	nop	
    76  000A8A  0000               	nop	
    77  000A8C  0000               	nop	
    78  000A8E  0000               	nop	
    79  000A90  0000               	nop	
    80  000A92  0000               	nop	
    81  000A94  0000               	nop	
    82  000A96  84CB               	bsf	16331,2,c	; Set port to HIGH
    83  000A98  0000               	nop	
    84  000A9A  0000               	nop	
    85  000A9C  0000               	nop	
    86  000A9E  0000               	nop	
    87  000AA0  0000               	nop	
    88  000AA2  0000               	nop	
    89  000AA4  0000               	nop	
    90  000AA6  0000               	nop	
    91  000AA8  0000               	nop	
    92  000AAA  0000               	nop	
    93  000AAC  0000               	nop	
    94  000AAE  0000               	nop	
    95  000AB0  0000               	nop	
    96  000AB2  0000               	nop	
    97  000AB4  0000               	nop	
    98  000AB6  0000               	nop	
    99  000AB8  0000               	nop	
   100  000ABA  0000               	nop	
   101  000ABC  0000               	nop	
   102  000ABE  0000               	nop	
   103  000AC0  0000               	nop	
   104  000AC2  0000               	nop	
   105  000AC4  0000               	nop	
   106  000AC6  0000               	nop	
   107  000AC8  0000               	nop	
   108  000ACA  0000               	nop	
   109  000ACC  0000               	nop	
   110  000ACE  0000               	nop	
   111  000AD0  0000               	nop	
   112  000AD2  0000               	nop	
   113  000AD4  0000               	nop	
   114  000AD6  0000               	nop	
   115  000AD8  0000               	nop	
   116  000ADA  0000               	nop	
   117  000ADC  0000               	nop	
   118  000ADE  0000               	nop	
   119  000AE0  0000               	nop	
   120  000AE2  0000               	nop	
   121  000AE4  0000               	nop	
   122  000AE6  EFB0  F005         	goto	getNextBit
   123  000AEA                     lowBitWrite:
   124  000AEA  4E48               	dcfsnz	_gConBitCounter,f,c	; Decrement the BIT counter. Skip next when NOT 0 to go to next bit
   125  000AEC  EF14  F006         	goto	endLowWrite
   126  000AF0  0000               	nop	
   127  000AF2  0000               	nop	
   128  000AF4  0000               	nop	
   129  000AF6  0000               	nop	
   130  000AF8  0000               	nop	
   131  000AFA  0000               	nop	
   132  000AFC  0000               	nop	
   133  000AFE  0000               	nop	
   134  000B00  0000               	nop	
   135  000B02  0000               	nop	
   136  000B04  0000               	nop	
   137  000B06  0000               	nop	
   138  000B08  0000               	nop	
   139  000B0A  0000               	nop	
   140  000B0C  0000               	nop	
   141  000B0E  0000               	nop	
   142  000B10  0000               	nop	
   143  000B12  0000               	nop	
   144  000B14  0000               	nop	
   145  000B16  0000               	nop	
   146  000B18  0000               	nop	
   147  000B1A  0000               	nop	
   148  000B1C  0000               	nop	
   149  000B1E  0000               	nop	
   150  000B20  0000               	nop	
   151  000B22  0000               	nop	
   152  000B24  0000               	nop	
   153  000B26  0000               	nop	
   154  000B28  0000               	nop	
   155  000B2A  0000               	nop	
   156  000B2C  0000               	nop	
   157  000B2E  0000               	nop	
   158  000B30  0000               	nop	
   159  000B32  0000               	nop	
   160  000B34  0000               	nop	
   161  000B36  0000               	nop	
   162  000B38  0000               	nop	
   163  000B3A  0000               	nop	
   164  000B3C  0000               	nop	
   165  000B3E  0000               	nop	
   166  000B40  0000               	nop	
   167  000B42  0000               	nop	
   168  000B44  0000               	nop	
   169  000B46  0000               	nop	
   170  000B48  0000               	nop	
   171  000B4A  84CB               	bsf	16331,2,c	; Set port to HIGH
   172  000B4C  0000               	nop	
   173  000B4E  0000               	nop	
   174  000B50  0000               	nop	
   175  000B52  0000               	nop	
   176  000B54  0000               	nop	
   177  000B56  0000               	nop	
   178  000B58  0000               	nop	
   179  000B5A  0000               	nop	
   180  000B5C  0000               	nop	
   181  000B5E  0000               	nop	
   182  000B60                     getNextBit:
   183  000B60  362E               	rlcf	_gConOutByte,f,c	; Rotate the byte left so we can read the next bit
   184  000B62  EF36  F005         	goto	writeBit	; We still have bits left, so go back up to writeBit.
   185  000B66                     getNextByte:
   186  000B66  2A2C               	incf	_gConOutIdx,f,c	; Increment our pointer value
   187  000B68  2E2D               	decfsz	_gConByteCount,f,c	; Decrement our Byte counter, skip when no bytes left to write our stop b
      +                          it.
   188  000B6A  EF2E  F005         	goto	newByte
   189  000B6E  0000               	nop	
   190  000B70  0000               	nop	
   191  000B72  0000               	nop	
   192  000B74  0000               	nop	
   193  000B76  0000               	nop	
   194  000B78  0000               	nop	
   195  000B7A  0000               	nop	
   196  000B7C  0000               	nop	
   197  000B7E  0000               	nop	
   198  000B80  0000               	nop	
   199  000B82  94CB               	bcf	16331,2,c	; Set port to LOW
   200  000B84  0000               	nop	
   201  000B86  0000               	nop	
   202  000B88  0000               	nop	
   203  000B8A  0000               	nop	
   204  000B8C  0000               	nop	
   205  000B8E  0000               	nop	
   206  000B90  0000               	nop	
   207  000B92  0000               	nop	
   208  000B94  0000               	nop	
   209  000B96  0000               	nop	
   210  000B98  0000               	nop	
   211  000B9A  0000               	nop	
   212  000B9C  0000               	nop	
   213  000B9E  0000               	nop	
   214  000BA0  0000               	nop	
   215  000BA2  0000               	nop	
   216  000BA4  0000               	nop	
   217  000BA6  0000               	nop	
   218  000BA8  0000               	nop	
   219  000BAA  0000               	nop	
   220  000BAC  0000               	nop	
   221  000BAE  0000               	nop	
   222  000BB0  0000               	nop	
   223  000BB2  0000               	nop	
   224  000BB4  0000               	nop	
   225  000BB6  0000               	nop	
   226  000BB8  0000               	nop	
   227  000BBA  0000               	nop	
   228  000BBC  0000               	nop	
   229  000BBE  0000               	nop	
   230  000BC0  0000               	nop	
   231  000BC2  0000               	nop	
   232  000BC4  0000               	nop	
   233  000BC6  84CB               	bsf	16331,2,c	; Set port to HIGH
   234  000BC8  8A46               	bsf	_gInStatus,5,c	; Set byte 5 of our status flag
   235                           
   236                           ; Bit 5 says that we have sent out our response
   237  000BCA  0012               	return	
   238  000BCC                     endHighWrite:
   239  000BCC  0000               	nop	
   240  000BCE  0000               	nop	
   241  000BD0  0000               	nop	
   242  000BD2  0000               	nop	
   243  000BD4  0000               	nop	
   244  000BD6  0000               	nop	
   245  000BD8  0000               	nop	
   246  000BDA  0000               	nop	
   247  000BDC  0000               	nop	
   248  000BDE  0000               	nop	
   249  000BE0  0000               	nop	
   250  000BE2  0000               	nop	
   251  000BE4  0000               	nop	
   252  000BE6  84CB               	bsf	16331,2,c	; Set port to HIGH
   253  000BE8  0000               	nop	
   254  000BEA  0000               	nop	
   255  000BEC  0000               	nop	
   256  000BEE  0000               	nop	
   257  000BF0  0000               	nop	
   258  000BF2  0000               	nop	
   259  000BF4  0000               	nop	
   260  000BF6  0000               	nop	
   261  000BF8  0000               	nop	
   262  000BFA  0000               	nop	
   263  000BFC  0000               	nop	
   264  000BFE  0000               	nop	
   265  000C00  0000               	nop	
   266  000C02  0000               	nop	
   267  000C04  0000               	nop	
   268  000C06  0000               	nop	
   269  000C08  0000               	nop	
   270  000C0A  0000               	nop	
   271  000C0C  0000               	nop	
   272  000C0E  0000               	nop	
   273  000C10  0000               	nop	
   274  000C12  0000               	nop	
   275  000C14  0000               	nop	
   276  000C16  0000               	nop	
   277  000C18  0000               	nop	
   278  000C1A  0000               	nop	
   279  000C1C  0000               	nop	
   280  000C1E  0000               	nop	
   281  000C20  0000               	nop	
   282  000C22  0000               	nop	
   283  000C24  EFB3  F005         	goto	getNextByte
   284  000C28                     endLowWrite:
   285  000C28  0000               	nop	
   286  000C2A  0000               	nop	
   287  000C2C  0000               	nop	
   288  000C2E  0000               	nop	
   289  000C30  0000               	nop	
   290  000C32  0000               	nop	
   291  000C34  0000               	nop	
   292  000C36  0000               	nop	
   293  000C38  0000               	nop	
   294  000C3A  0000               	nop	
   295  000C3C  0000               	nop	
   296  000C3E  0000               	nop	
   297  000C40  0000               	nop	
   298  000C42  0000               	nop	
   299  000C44  0000               	nop	
   300  000C46  0000               	nop	
   301  000C48  0000               	nop	
   302  000C4A  0000               	nop	
   303  000C4C  0000               	nop	
   304  000C4E  0000               	nop	
   305  000C50  0000               	nop	
   306  000C52  0000               	nop	
   307  000C54  0000               	nop	
   308  000C56  0000               	nop	
   309  000C58  0000               	nop	
   310  000C5A  0000               	nop	
   311  000C5C  0000               	nop	
   312  000C5E  0000               	nop	
   313  000C60  0000               	nop	
   314  000C62  0000               	nop	
   315  000C64  0000               	nop	
   316  000C66  0000               	nop	
   317  000C68  0000               	nop	
   318  000C6A  0000               	nop	
   319  000C6C  0000               	nop	
   320  000C6E  0000               	nop	
   321  000C70  0000               	nop	
   322  000C72  0000               	nop	
   323  000C74  0000               	nop	
   324  000C76  0000               	nop	
   325  000C78  0000               	nop	
   326  000C7A  0000               	nop	
   327  000C7C  0000               	nop	
   328  000C7E  0000               	nop	
   329  000C80  0000               	nop	
   330  000C82  0000               	nop	
   331  000C84  84CB               	bsf	16331,2,c	; Set port to HIGH
   332  000C86  EFB3  F005         	goto	getNextByte
   333                           tosu	equ	0x3FFF
   334                           tosh	equ	0x3FFE
   335                           tosl	equ	0x3FFD
   336                           stkptr	equ	0x3FFC
   337                           pclatu	equ	0x3FFB
   338                           pclath	equ	0x3FFA
   339                           pcl	equ	0x3FF9
   340                           tblptru	equ	0x3FF8
   341                           tblptrh	equ	0x3FF7
   342                           tblptrl	equ	0x3FF6
   343                           tablat	equ	0x3FF5
   344                           prodh	equ	0x3FF4
   345                           prodl	equ	0x3FF3
   346                           indf0	equ	0x3FEF
   347                           postinc0	equ	0x3FEE
   348                           postdec0	equ	0x3FED
   349                           preinc0	equ	0x3FEC
   350                           plusw0	equ	0x3FEB
   351                           fsr0h	equ	0x3FEA
   352                           fsr0l	equ	0x3FE9
   353                           wreg	equ	0x3FE8
   354                           indf1	equ	0x3FE7
   355                           postinc1	equ	0x3FE6
   356                           postdec1	equ	0x3FE5
   357                           preinc1	equ	0x3FE4
   358                           plusw1	equ	0x3FE3
   359                           fsr1h	equ	0x3FE2
   360                           fsr1l	equ	0x3FE1
   361                           bsr	equ	0x3FE0
   362                           indf2	equ	0x3FDF
   363                           postinc2	equ	0x3FDE
   364                           postdec2	equ	0x3FDD
   365                           preinc2	equ	0x3FDC
   366                           plusw2	equ	0x3FDB
   367                           fsr2h	equ	0x3FDA
   368                           fsr2l	equ	0x3FD9
   369                           status	equ	0x3FD8


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                               Tue Jan 18 14:08:49 2022

                          FSR0 003FE9                           INDF0 003FEF                           PORTB 003FCB  
                         TRISB 003FC3                     _gConOutIdx 002C                         isa$std 000001  
                       newByte 0A5C                 _gConBitCounter 0048                    _gConOutByte 002E  
                   endLowWrite 0C28                     getNextByte 0B66                        writeBit 0A6C  
                    _gInStatus 0046                    stopBitWrite 0B6E                     lowBitWrite 0AEA  
                _gConByteCount 002D                      getNextBit 0B60                    _bytecleanup 1574  
                     _bytepush 0A56                       isa$xinst 000000                    endHighWrite 0BCC  
                  highBitWrite 0A74  
